@model Interext.Models.EventViewModel
@section CssStyles{
    @Styles.Render("~/Content/eventPageCss")
    @Styles.Render("~/Content/colorPickerCss")
}
@{
    ViewBag.Title = "Edit Event";
}


<div id="content" class="right-sidebar">
    <div class="event-page-content create-page">
        <article>
            @using (Html.BeginForm("Edit", "Event", FormMethod.Post, new { @enctype = "multipart/form-data", id = "EventForm" }))
            {
                @Html.Hidden("id", Request["id"])
                @Html.AntiForgeryToken()
                <div class="event-intro-wrapper">
                    <div class="event-intro">
                        <h1 class="event-title">Edit your event</h1>
                        <div class="clear"></div>
                    </div>
                </div>
                <div class="create-form">
                    <div class="create-basic-info">
                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control full-control", @placeholder = "Title" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @placeholder = "Description" })
                        <div class="input-with-image-wrapper date-control">
                            <input type="text" id="DateOfTheEvent" name="DateOfTheEvent" class="form-control" placeholder="Date of the event" value="@Model.DateOfTheEvent" />
                            <span class="fa fa-calendar insert-image-button"></span>
                        </div>
                        @Html.TextBoxFor(m => m.MinuteTimeOfTheEvent, new { @class = "form-control minute-control", @id = "MinuteTimeOfTheEvent" })<span class="colon">:</span>
                        @Html.TextBoxFor(m => m.HourTimeOfTheEvent, new { @class = "form-control hour-control", @id = "HourTimeOfTheEvent" })
                        <span class="time-title">Time:</span>
                        @Html.CheckBoxFor(m => m.TimeSet, new { @class = "time-set" })
                        <div class="clear"></div>
                        @Html.HiddenFor(m => m.DateTimeOfTheEvent, new { @id = "DateTimeOfTheEvent" })
                        <div class="input-with-image-wrapper">
                            @Html.TextBoxFor(m => m.Place, new { @class = "form-control full-control", @placeholder = "Location of the event", @id = "locationSearchTextField" })
                            @Html.HiddenFor(m => m.PlaceLatitude, new { @id = "PlaceLatitude", @value = "0" })
                            @Html.HiddenFor(m => m.PlaceLongitude, new { @id = "PlaceLongitude", @value = "0" })
                            <span class="fa fa-map-marker insert-image-button"></span>
                        </div>

                        <div class="event-privacy-text"><span class="fa fa-eye"></span> Event privacy:</div>
                        <select id="dpdPrivacy" name="PrivacyType">
                            @foreach (var item in Model.PrivacyTypeOptions)
                            {
                                var type = typeof(Interext.Models.e_PrivacyType);
                                var memInfo = type.GetMember(item.Key.ToString());
                                var attributes = memInfo[0].GetCustomAttributes(typeof(System.ComponentModel.DescriptionAttribute), false);
                                var description = ((System.ComponentModel.DescriptionAttribute)attributes[0]).Description;

                                if (@item.Value == true)
                                {
                                    <option value="@item.Key.ToString()" selected="selected">@description</option>
                                }
                                else
                                {
                                    <option value="@item.Key.ToString()">@description</option>
                                }
                            }

                        </select>




                    </div>
                    <div class="create-more-info">
                        @Html.Partial("~/Views/Interests/_SelectInterestsPopup.cshtml", Model.AllInterests)
                        <span class="btn btn-dark fileinput-button choose-image">
                            <span class="fa fa-picture-o"></span>
                            <span>Upload image</span>
                            @Html.TextBoxFor(m => m.ImageUrl, new { @type = "file", @id = "ImageUrl", @class = "from-edit" })
                        </span>
                        or
                        <span class="open-popup-container">
                            <span class="btn btn-dark fileinput-button open-stock-popup choose-from-stock ">
                                <span class="fa fa-picture-o"></span>
                                <span>Choose from stock</span>
                            </span>
                            <div class="data-for-popup">
                                <ul class="picture-list">
                                    @foreach (var category in Model.AllInterests)
                                    {
                                        <li>
                                            <div class="title">@category.Title</div>
                                            <ul>

                                                @foreach (var image in category.ImagesForStock)
                                                {
                                                    <li class="stock-img-wrapper">
                                                        @if (Model.ImageFromStock == image)
                                                        {
                                                            <input type="radio" name="radioChooseFromStack" class="radioChooseFromStack" value="@image" checked="checked" />
                                                        }
                                                        else
                                                        {
                                                            <input type="radio" name="radioChooseFromStack" class="radioChooseFromStack" value="@image" />
                                                        }
                                                        <div class="stock-img" style="background-image:url('@image');"></div>
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                            </div>

                            @Html.HiddenFor(m => m.ImageFromStock)
                            @Html.HiddenFor(m => m.isImageFromStock)
                        </span>
                        <br />

                        <div id="colorSelector">
                            <div style="background-color: rgb(@Model.BackroundColor)"></div>
                        </div>
                        <div class="left choose-bg-color-text">
                            Choose background color for text:
                        </div>
                        <input type="hidden" id="BackroundColor" name="BackroundColor" value="rgb(@Model.BackroundColor)" />
                        <div class="clear"></div>
                        <div class="left choose-bg-alpha-text">
                            Set opacity of the background:
                        </div>
                        <div id="slider" class="left"></div>
                        <input type="hidden" id="BackroundColorOpacity" name="BackroundColorOpacity" value="@Model.BackroundColorOpacity" />
                        <div class="clear"></div>

                        <br />
                        The side of the text:
                        <select id="dpdTextSide" name="SideOfText">
                            @foreach (var item in Model.SideOfTextOptions)
                            {
                                if (@item.Value == true)
                                {
                                    <option value="@item.Key.ToLower()" selected="selected">@item.Key</option>
                                }
                                else
                                {
                                    <option value="@item.Key.ToLower()">@item.Key</option>
                                }
                            }
                        </select>
                        <br />
                        Age of the participants:
                        @Html.TextBoxFor(m => m.AgeOfParticipantsMin, new { @id = "txtAgeOfParticipantsFrom", @class = "short-field", @placeholder = "Min" })
                        @Html.TextBoxFor(m => m.AgeOfParticipantsMax, new { @id = "txtAgeOfParticipantsTo", @class = "short-field", @placeholder = "Max" })
                        <br />
                        Gender of the participants:
                        <select id="dpdGender" name="GenderParticipant">
                            @foreach (var item in Model.GenderParticipantOptions)
                            {
                                if (@item.Value == true)
                                {
                                    <option value="@item.Key" selected="selected">@item.Key</option>
                                }
                                else
                                {
                                    <option value="@item.Key">@item.Key</option>
                                }
                            }
                        </select>
                        <input type="submit" value="Update" class="btn btn-special" />
                        @Html.ValidationSummary(false, "Please fill the required fields")
                    </div>
                    <div class="clear"></div>
                </div>

            }
        </article>
    </div>
</div>

<div id="sidebar" class="right-sidebar">
    <ul>
        <li class="widget">
            <h3>YOUR EVENT DRAFT</h3>
            <div class="event-box" data-src="@Model.ImageUrl" data-width="1144" data-height="791" style="opacity: 1; visibility: visible; width: 312px; height: 312px; padding-bottom: 1px; padding-right: 1px; -webkit-transform: scale(1, 1) roate(0deg); z- ndex: 1; po ition:sta tic;">
                <div class="event-box-innerwrap pagetop" style="-webkit-transform: scale(1, 1) perspective(10000px) rotateX(0deg); opacity: 1; background: url('@Model.ImageUrl') 50% 49% / cover no-repeat;">
                    <div>
                        <a class="event-box-content @Model.SideOfText" style="background-color:rgb(@Model.BackroundColor);background-color:rgba(@Model.BackroundColor,@Model.BackroundColorOpacity);">
                            <div class="event-date" id="draftDate">@Model.DateTimeOfTheEvent.Day.@Model.DateTimeOfTheEvent.Month</div>
                            <div class="event-title" id="draftTitle">@Model.Title</div>
                            <div class="event-location" id="draftLocation"><span class="fa fa-map-marker"></span>@Model.Place</div>
                            <table>

                                <tr class="event-age-of-participants-container" @if (!Model.AgeOfParticipantsSet) { @("style=display:none;"); }>
                                    <td>
                                        Age
                                    </td>
                                    <td id="draftAgeOfParticipants">
                                        @if (Model.AgeOfParticipantsMin != null && Model.AgeOfParticipantsMax != null)
                                        {
                                            @Model.AgeOfParticipantsMin<span>-</span>@Model.AgeOfParticipantsMax
                                        }
                                        @if (Model.AgeOfParticipantsMin != null && Model.AgeOfParticipantsMax == null)
                                        {
                                            @Model.AgeOfParticipantsMin<span>+</span>
                                        }
                                        @if (Model.AgeOfParticipantsMin == null && Model.AgeOfParticipantsMax != null)
                                        {
                                            <span>under</span>
                                            @Model.AgeOfParticipantsMax
                                        }
                                    </td>
                                </tr>

                                <tr class="event-gender-container" @if (Model.GenderParticipant == "Both") { @("style='display:none;'")  ; }><td>Gender</td><td id="draftGender">@Model.GenderParticipant</td></tr>

                                @if (Model.UsersAttending.Count() > 0)
                                {
                                    <tr class="event-num-of-participants-container">
                                        <td>Attenders</td>
                                        <td>@Model.UsersAttending.Count()</td>
                                    </tr>
                                }

                                <tr class="event-by-person"><td>Created by</td><td><img src="@Model.CreatorUser.ImageUrl" /></td></tr>


                            </table>



                        </a>
                    </div>
                </div>
            </div>
        </li>
    </ul>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/eventPageJs")
    @Scripts.Render("~/bundles/colorPickerJs")
}
