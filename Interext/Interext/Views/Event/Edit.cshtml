@model Interext.Models.EventViewModel
@section CssStyles{
    @Styles.Render("~/Content/eventPageCss")
    @Styles.Render("~/Content/colorPickerCss")
}
@{
    ViewBag.Title = "Edit Event";
}


<div id="content" class="right-sidebar">
    <div class="event-page-content create-page">
        <article>
            @using (Html.BeginForm("Edit", "Event", FormMethod.Post, new { @enctype = "multipart/form-data" }))
            {
                @Html.Hidden("id", Request["id"])
                @Html.AntiForgeryToken()
                <div class="event-intro-wrapper">
                    <div class="event-intro">
                        <h1 class="event-title">Edit your event</h1>
                        <div class="clear"></div>
                    </div>
                </div>
                <div class="create-form">

                    @Html.ValidationSummary(true)
                    <div class="create-basic-info">

                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control full-control", @placeholder = "Title" })
                        @Html.ValidationMessageFor(m => m.Title)

                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @placeholder = "Description" })
                        @Html.ValidationMessageFor(model => model.Description)
                        <div class="input-with-image-wrapper">
                            <input type="text" id="DateTimeOfTheEvent" name="DateOfTheEvent" class="form-control full-control" placeholder="Date of the event" value="@Model.DateOfTheEvent.ToShortDateString()" />
                            <input type="text" id="HourTimeOfTheEvent" name="HourTimeOfTheEvent" class="form-control full-control" placeholder="Hour of the event" value="@Model.HourTimeOfTheEvent"/>
                            <input type="text" id="MinuteTimeOfTheEvent" name="MinuteTimeOfTheEvent" class="form-control full-control" placeholder="Minute of the event" value="@Model.MinuteTimeOfTheEvent" />
                        </div>
                        @Html.ValidationMessageFor(m => m.DateOfTheEvent)
                        <div class="input-with-image-wrapper">

                            @Html.TextBoxFor(m => m.Place, new { @class = "form-control full-control", @placeholder = "Location of the event", @id = "locationSearchTextField" })
                            <input type="hidden" id="PlaceLongitude" name="PlaceLongitude" value="0" />
                            <input type="hidden" id="PlaceLatitude" name="PlaceLatitude" value="0" />

                            @*<input type="text" class="form-control full-control" id="searchTextField" placeholder="Location of event" name="Place" />*@

                            <span class="fa fa-map-marker insert-image-button"></span>
                        </div>

                    </div>
                    <div class="create-more-info">
                        <span class="btn btn-dark fileinput-button">
                            <span class="fa fa-picture-o"></span>
                            <span>Upload image</span>
                            <input type="file" name="ImageUrl" id="ImageUrl" value="@Model.ImageUrl">
                        </span>
                        or
                        <span class="btn btn-disabled fileinput-button">
                            <span class="fa fa-picture-o"></span>
                            <span>Choose from stock</span>
                        </span>
                        <br />

                        <div id="colorSelector">
                            <div style="background-color: #000"></div>
                        </div>
                        <div class="left choose-bg-color-text">
                            Choose background color for text:
                        </div>
                        <input type="hidden" id="BackroundColor" name="BackroundColor" value="rgb(@Model.BackroundColor)" />
                        <div class="clear"></div>
                        <div class="left choose-bg-alpha-text">
                            Set opacity of the background:
                        </div>
                        <div id="slider" class="left"></div>
                        <input type="hidden" id="BackroundColorOpacity" name="BackroundColorOpacity" value="@Model.BackroundColorOpacity" />
                        <div class="clear"></div>

                        <br />
                        The side of the text:
                        <select id="dpdTextSide" name="SideOfText">
                            @foreach (var item in Model.SideOfTextOptions)
                            {
                                if (@item.Value == true)
                                {
                                    <option value="@item.Key.ToLower()" selected="selected">@item.Key</option>
                                }
                                else
                                {
                                    <option value="@item.Key.ToLower()">@item.Key</option>
                                }
                            }
                        </select>
                        <br />
                        Number of participants:
                        @Html.TextBoxFor(m => m.NumOfParticipantsMin, new { @id = "txtNumOfParticipantsFrom", @class = "short-field", @placeholder = "Min" })
                        @Html.TextBoxFor(m => m.NumOfParticipantsMax, new { @id = "txtNumOfParticipantsTo", @class = "short-field", @placeholder = "Max" })
                        <br />
                        Age of the participants:
                        @Html.TextBoxFor(m => m.AgeOfParticipantsMin, new { @id = "txtAgeOfParticipantsFrom", @class = "short-field", @placeholder = "Min" })
                        @Html.ValidationMessageFor(m => m.NumOfParticipantsMin)
                        @Html.TextBoxFor(m => m.AgeOfParticipantsMax, new { @id = "txtAgeOfParticipantsTo", @class = "short-field", @placeholder = "Max" })
                        @Html.ValidationMessageFor(m => m.NumOfParticipantsMax)
                        <br />
                        Gender of the participants:
                        <select id="dpdGender" name="GenderParticipant">
                            @foreach (var item in Model.GenderParticipantOptions)
                            {
                                if (@item.Value == true)
                                {
                                    <option value="@item.Key" selected="selected">@item.Key</option>
                                }
                                else
                                {
                                    <option value="@item.Key">@item.Key</option>
                                }
                            }
                        </select>
                        <input type="submit" value="Update" class="btn btn-special" />
                    </div>
                </div>
            }
        </article>
    </div>
</div>

<div id="sidebar" class="right-sidebar">
    <ul>
        <li class="widget">
            <h3>YOUR EVENT DRAFT</h3>
            <div class="event-box" data-src="@Model.ImageUrl" data-width="1144" data-height="791" style="opacity: 1; visibility: visible; width: 312px; height: 312px; padding-bottom: 1px; padding-right: 1px; -webkit-transform: scale(1, 1) roate(0deg); z- ndex: 1; po ition:sta tic;">
                <div class="event-box-innerwrap pagetop" style="-webkit-transform: scale(1, 1) perspective(10000px) rotateX(0deg); opacity: 1; background: url('@Model.ImageUrl') 50% 49% / cover no-repeat;">
                    <div>
                        <a href="/Event/Details?Id=1" class="event-box-content @Model.SideOfText" style="background-color:rgb(@Model.BackroundColor);background-color:rgba(@Model.BackroundColor,@Model.BackroundColorOpacity);">
                            <div class="event-date" id="draftDate">@Model.DateOfTheEvent.Day.@Model.DateOfTheEvent.Month @Model.HourTimeOfTheEvent:@Model.MinuteTimeOfTheEvent</div>
                            <div class="event-title" id="draftTitle">@Model.Title</div>
                            <div class="event-location" id="draftLocation"><span class="fa fa-map-marker"></span>@Model.Place</div>
                            <div class="event-num-of-participants-container">Number of participants: <span id="draftNumOfParticipants">@Model.NumOfParticipantsMin@if(Model.NumOfParticipantsMax != null){<span>-</span>@Model.NumOfParticipantsMax}else{<span>+</span>}</span></div>
                            <div class="event-age-of-participants-container">Age: <span id="draftAgeOfParticipants">@Model.AgeOfParticipantsMin@if (Model.AgeOfParticipantsMax != null){<span>-</span>@Model.AgeOfParticipantsMax}else{<span>+</span>}</span></div>
                            @if (Model.GenderParticipant != "Both")
                            {
                                <div class="event-gender-container">Gender: <span id="draftGender">@Model.GenderParticipant</span></div>
                            }
                            <div class="event-by-person">Created by <img src="@Model.CreatorUser.ImageUrl" /></div>
                        </a>
                    </div>
                </div>
            </div>
        </li>
    </ul>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/eventPageJs")
    @Scripts.Render("~/bundles/colorPickerJs")
}
